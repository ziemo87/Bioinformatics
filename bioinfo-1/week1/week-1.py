from itertools import islice

cholera_ori = 'TTGGTGTCCCAAGCACCGTGATCGCCCGACCTAGTGTTCGATGGGGTTCTGTCGGCGGTATATTCTTGTCGGCGCACTTGGGCATGGCGGTGAAATTGTGGGTCGCCGAGTAACTACAGAATTTCGTGTTGAGGCTTGGGCCTTACCTCCATTGTGATTTCAACTCCCGGAACATAATGACTCGGGTTGGTCGAGAGGGCACGATGCAAGCGATCGTTCAACCTGAACCCTCAACCCAAATCACGTATCTAGACTAAATATTGGGATGGGATCAGCTACTCAGTAACCACAGTACTTGTGCAGTGTAAGGGACGGACACACGTGAACCCGCCCCCACGCAATGTATTCAAACTCAGATACCTGGGATGGCCGCATGAGGAGTTAATGATGCGAAATGCCTGGCCGAGCAAACTTATCTTTAACATTTGTATAGGGCGTACTTCCATGCGTGGCGTGTTTAGGAAGTAGGGGCCGCTGATTGATGCTACTCTAGCGCTATTTATCTTAGGAGCACTGCCCCCACCTCGGCCGTACTCGAGACTAGTAGCAATGGGAAACCCACCGAGGCTATGCAACATGAGTGTCAGCCATTTGGTTACGAGTCGTACTCCCACATTCGTGGCGTCCTAGTATGACTTGGGGTGGACCTGCACTCAGCAACGGAAACGTGGGTAACCCCAGGCATCAGGTATGGCCACATAGCTTTCAGGCAGACTGGGCACTTTCTCGAGGTCATTACTTGCTGAATACGACTTACTATGAGAGGAATAAGTAGGTGCTCGCCGGCGACAGCATAATCCCCATGCCAAATTTTGATCATTGCCTTTGATACTCAAGATTTCGCTGAAGTAGACGAATTCAGCCCCGTGGCTTAGGGTATTACCCTTGGCTCACATCTGGGCTTTATGGCGTATGTATGCAGTGCAGTCACGAGCCCGGTTGCTCTTCTGATGTAGAAGCGGACCGTCATCAATATGATCGCGACCGAAAGGAACCGCAACTCGTTCTAACTTCGGGACTCTGAGTTCCGATGAAACTTCGCGGCCGGTTCTAAAGCAAGATTCTACCTGGACTAGTTAGGAGGCGGTACACCGTACTTTGAGATTTGACTATATCCCAGTAGACATCCATGACACTGGACATGTTGCTACGTGAAATAGGACGGTTAAATGAAGGGCATATCGTACCTTATATGGGGCAGTTATACGCCTTCAATGGAGTTTCCCAGAACGAAATATACGGCCCCGAGTTGGCCATTTATTCATCGCCTATATTCCTAACTCAACTTCCCAAAGGCGGGTGGATCCACACCCCGCACGAATGCAGTCAGCCCCCAGGGCTCTAAAGATTCAATCTACGGAGTGCACTGGCGAACTTATACCGTCCCCTTTAGTATGCACACTCCCCGCAGAGTTCCTAGGAGAATACAAGCTGGGCTCATGGCGTAACACAGACAGAGTTGCGAAACAAGATGAAGCCAGTTCTCGCACTTGCTGGGCCAGGCAACCCTGGGATATCATTGTTCTAGCGCGCAGCACGTGACCTTGGGCAGTGGCAGCCTAGCATCCTTGGTACTGATAACAGCCACTTCAATCAGCGCGGACCGCCATATGAGCGATCCGGTAACAAGGTCCCATCAACGAATCAAAGTTAGATGTAAGGCTACTAGGGTCGCAGCCAGCCACTCCATATGTGACGGTAGCCTCCCGGTCGTTACAACCCACAGCAGCAAAACGAGTATGTGACTCTCATCTATGGAGTAGGGACACTGATTCCGGACGCCTAAAATGCGCCTTTCTACAGGCAAGGTCTGGTATCACCTCTTAGTGCCGGTAGCGGATAATGGGCGCTTTCAGCGTACGGGATCAGCCACAGAGTCCACAGGTCTGCGTGCACGTGGGCATGGACGCCGTGAGTGAAAGCCATCGCGTTCCTTCGGTATCGAAGCACTTGTACGTCCCCCGCATTTTATGTGTAAATGTTAACGAATTAGATTTCATCACTTCGTGCGCCACCGGGAGTAGGGATGCCAGCTGCGCTAGTGCAATCGGCTAGCTAAGTTTGCTGCCGTTGCTTATCCGATTGTACGATCAATGATCTAAGATATATGCCGTGGCCGTCGGCACTTGATGATACACTCCGAATACATCTGTCGTGTCCAGAGTGAGCGGCGCGGGGACTGGAAGGTTTTATGGTGGACTGCCAGCTTATTGACATACATGGTGGAGGGTTATTCAAGGTCGGGACAAACCATAGGGCAGTTTTTCGTTTGAGCGCTTATGGCGACGAGGCCTAGTGCCTCGACACTCCCGTTTCCCTAGAGCGAGTACCCCGTCCCGCCAACTTCAAAAGAGCTGGTACAAGCAATTTGGTCCAGAGCAATCAGTCAACGCCAAACTGCGTCTCCAATGACGACGGTCAAGCTTGAGAGTTTAGACCGTCCTGGGACGGTAAGACGACCAAGTCTTATTAATGGCAGTCCACCGAGTCTTTAGCATATTTCCACGAAATTCGGAGAACCTACCGCTTTAGAATGACAGGCTCTCACGTTTGCGAGCGTAGATGGTTCCGTTGCGGGAGGGGCCTCGCACCCCGCAGACCTGCCTTCGAATGTCGGTAAAAGCTGATGACTTGTGCCCGGCGCCTTCCTCTTGCTCATCTAACCTAGCCAGCCGCCCCTTTTTTATACAGCTTCATTTTTCGTATAGATGAAGAAATCAGGTAAAATAGCTCGCCAATGAGACTGTTTTTGACGCCACAAGCGGATTGCGCATATAAGTCCCGCAGTACGCACCCTAATTCAACAGCTATTGGCGACCCCAAATGTATTAACAGTGCTTCCAGCCAGTAACAAATTCTGTGTGACCACCGGGTTTCACTCGTCGCAATTACGCGTAAAGAAAGAAAAAGACTAGCGTCCTGCCGACGAGTTGCTCACTCGCAGAGCCCACGGACCGGACGGTTCAACCGACGGGATAGAAGGTCCAGTACCGAACCTATCGGTTTTGGGTGTCCGGCAGACTTGTAGTATTCTGCTAGATGTGGGCGTAGAGGGAATCTCGCAGACAGGAGGCGGACCATTTCAACTCGACTTGCATAGTCGGTAGTCTGCATCAGCCCGAATAGATGTACAGAATCGTTCCTATCTATTAGCTAATAACTGTCATCCTAAGTTGCATTAATATTTCCCTCACCCATTGTGCTGAGCCGTCGTGCACTAACTCATATGGTGTTTAGCCATCATTTATTTTCCTCCCCCGAATCCAGAGCACACCTTAATCCAAAACGCACTAAAGCGCTCGTGCGCCAAATAAAATGCTAATATAAGCTTCGTTTTATTAGTGGGCCGGCGCCCATCTAAATTTGGTCGATTCGTTTACAATTACAGGCTCGGCGATATCTGAGACGTCATACATTGCAAACTGTGATTGCAGTTGGTACTAAACTGTTCCCTGACAAACACGCCGTGCGGCAGTCTTCGTCTTCGTGCTGCACTCCGGGCAAGACTAACTACCAATTAGGAGACGGTCCCAAGCCAAACAGGGCCTTGTTACGGGATGTATCACACCATGTCCGATGGGCTTATTTTACTATTAAAAATAAAGCTGCCAGAAATTGCTAAACCCACTAGCATCAAAATAAATACCCGACTGATAGTATGGCCATCAGGCCATGGATCTACGGTATAGTGGGAAAGTTTAATGAACTGGATTATATCGAGTTGATCCCCATCGCGGCCATAATCGGCTTAACCTTACAAATAGGGTAATTGCCAGTGGCAGGGAACGGCTTCAACTGGTTACGACTGATGTATACGCTACAATGTAACGACGCTAGCCTGGACCCCGAAAGGCTGGTAGTCCTATACACTAAAATAGAAGGCTAAAAAAACTGCCTATAGAAATTACGAGTCCGAGGAACGCCTCCACTTACAGTACACCGCGAACGCTACTCCGAGCTTACGGGATCAGCGAATCTTAGACTTTCTTCCGACTACACCCACGTATGCGTAAGGCTTAGTTACCTACATCTCGACTGCCAGCTTAGTCATAGGAATTGTCTGATTAATTTACCGTAGTAAGCCGAACGGCCCTCTAAGAATAGGAAGATATGGGACATACGCATACAACAGGCATGAACTCATCGCCCGCGTAGAAAACAAACGGCGCTCGTTCTCCAGACAGGGCCTTTAGCGCATCAAGCCGGTCTGCGCACCATCCCATCTTCATTAGGGGATCCTCCGGTGATGTGCTACCTCCGTGGCCGTCTCTTTCCCCGGATACAGCTGATAGTCGCCCCGTAATCCGGTAGCTGCTACCTTCATGGCTCTAAGAGATCCTTGTGTTGCCAAAGGATCAGGTAATTCCCCAGAGCCCAACTGCGAGGTCCCCCCTGAAGGATCCAGTGCCGCGGTTTAAAAGAACTCGAAATGTGTTACGCTTAATGACCAAGCGGTAAGAGTCGCCTGAGCATCCTATTAATCAGTGCCCGTACAGCCATTGCCGTCCTACAGGTATATGGCCTGTATTTAGAAAACGAAGTCGGATTTATAGTTAGTATCTCCGTACGTTCACAAGAACGAGTAGGTTTTCGATTCAACCCGCTCACGTAAAGTCCAGAGTTAACTGTCCGGATTCGACATTGTTTGACTCTGCTGCTGCGTGTGTTTCTAGGCTCGAACTAATTTCCGCCCTTCACAACTGCCGATGGATACAACGGTAAACCCACGACAGTTTTCTTGCGACGGTCTACGAGTTAGTGAGTGTGACCTTAGATTGGCCGTCTGGCTAGTGGCAACTGGTTCGGGGTCCGCGGTAACTATTTCATACAACCGGGGCGACGCCTAGAGGGTTGGGCAACGTCGAGACTCACCCGTCTGATAGCGAAGGGCAACTCCCCGGAGAGGATATCAATCTATAGGTGTGCGTGAATGATTACTTAATATGATATACCACCCAGGCGGACACATCGCACGCGCGACGAGGTGCCATGTCGAGCCCTCTCGGTACTAGTGGCACTTGGATTTGTGCCCTCAGAGCCTGCCAAGTATATGGCGACAGCGACTACCAATGTAATCGATTGTAAAAGAGATCCCGGAAAAGTAAAATAGTGGTGCAGTAATCGTTTGCTCCCCACGGCGGTCCGGACTATTTTTATAAAGTAAAGTCATTAAGGGCCGCACCCCCTTGAGCGGATGAAATTGCCTTAGTATATCTACTTTATCGTTATGTTTACGATGCTGCGAAGGTAGTGCAAGACTAGAATCGGAGGCGTTGACAGATCGTGACATTCCCCTTTAGGTGACCAGTGAAGGAAACGAGCTCACAACGTGCCAGCCCTCACGCCACCACTAGGACCGTCAACAAAGATGAGCCGGACAGCATGTCGTTTACGCGTCATCGGGGGCTGTGCCGGATGAAATGATATTGAGCTCCTAACAACATACGGGCTATTCTGTACCGAATTTTCTGCCTATGGCTAGATACCTCCGAGAATGGTAGAGTGCGCCGTATTTGGGCTAAATAACCAAACGAGGGGCGGTGTGATCACCAAGTATGATAAGACTCCAGTCTGTAATCCAATCTTTTTCATAACGCCGCCGTGGCGTTAAGCTTGAGTATTCAAATTGAGGCTCTTAAGCACACCAGAACATCCGCCCAGGAACGCTTGACTGAGTCTAGCCATCCAAAGGTGAGCAAGCAAGACCCCCTATGCACAGGATTCTCGAACGCCGGCAGGCAAGCGCTAAGCAATGCATATGCAAACAGTTTCGAGGATCAATATCGGTCGCGAGGAACGGAATACGTTCGGAGGCAAAGCGCATGCCAACCGAGTATTAACTAACGGTTCTTACGTTAGGTGGCCGCCCATCTACGGGGGACATGACAGCGTTCCTCTGTGATCAGATTAGATCACTACTACTCATGGAATACTCTGATGACCTTACAGCATACTCGTCTCTCGAATACTCTCCCTGCAAATGTCTTAATGCTTCTAAATGAGGGAGAGGAATAACGTCACCCTGCATTTTCCACTCTGAACCAACTATTGCCCACGCATGAAAAAGCATGGTTATCTTCGCAGACGGCCAAGCGGTTCCACAACCACGTGGCCCTCGATTAGGCCGCTCGGGTTCAATGCGCAGATCCGGTTTCTCCCAGTGCCCGAATGACTTAAGTGGCTATGTAGTCCATCAGACACCGTCCATCAAACTGGGACAACCCAAGGAGGTCACATGCCGCTATTCCGTGTGCTTTCTTGTACACGGCTCGCCCTGGGTACAAGCAACGTCCCGGGTGAACTCGCGACAATCTACTGGGTGGCGACCATGAACGGTTGACATAACTAGTATACGACGCTAAACTGAATTACTTGGATTCGGCGACACGGTAACCAATCACTCATTTGTGCGAACGCTATCGCCTCTACAAGGAACATGAGATGGTGAGTAGTGTCCATTGCCAGGTAACTAGTCATACCCTCGGGTCGGAGGGCTCACCATGGTAGCGTGAGGGGCTGCTACCGGCTCAAGCAATTGCCCTCATCTGCAGTGTCCTCGTTCCGATTGCCCTTTTAGATGCCAAAAGTATCCAGTGGAGTTAGGGGTCCAGCCCTCTGCTAAGAAAGGTAACCTGCACCCCGTGTCTTTATGCGTCCGCCTGAAGACTGTGCGGCAGGTAACGACGTATTGATGCCTCGGCTTACGGCGCACGTACGTGTGGGGGGTGGTCTAAACAACTCCGATCTCCTCTCGGGCAGAAACTGGAAGTGACAGTGAATTAGGGATTAAAAAGACAAGTTTGGCTTGCGAGCCTTAATTATTATCATGGCGAAAGAGTCTATAACGCCTCTGAGTAGACGCGTCCAGGTATGCCTAACTTAAGACGTGAGCAACTCTACAACATAACTATATCAGTCGCAGCGAACCGTAAGTCGTCGACTGCAAGGTGGGAAGACATGAGCTTTGTAGTGCTGCGGTACCTAATAAAATGAGCATACGCCTAGCACAGCGGTCCACGACCGAACACGGCCATTCGCATAAATCGGAGTCGCTATGATCCTAACGGATCGGTTGGCTTCAAAGCTGGCACACAACCCACGTAAGTGCTAGTAACACTCGTTAAAAGTGTGAGATAAGTAGGACGAAAACGCCACGTGAACTCTGTGATGCATAGTTAGCTGTCGCAGAAGTCTCGCTGGAAAAAAATCACAGTCAGGATCGGGCAATGATAAGGCACCTAATTGCACAAGAAAGATAAACCTCGTTCGGTTCCTACGGCGACGCCTGGATTACGCTGGGATACACAAAGGACAAATGGAATGCGTTACATGAGGGATTTGCAAACGGGATATATGAGACATCGAAAGTCCGTTTCCGCACGCAGCCAGATTTAAGTCACCGGCAACTTTCCTGTCGTTTTATCATTGGCTTTGGCGTTATAAGCCCATGCTGATATGGGCGTACAACGCCTAGTGCTGTCTAAGCACGTCGTAGTTGGGCTGACTCCCACTGTTGGTAACATTGGATTGGCTTTGGGCTAAAGAGACAAGGTGGGTTTACATCAGGGGGACTGATACACGAAACCCTCGATTATGTGTTTGTAATCCAGCTATTCTGGATAAGAGCAAGTTCCTTAACCCCCTGGTCTCGATCTATTAGCGTACAAATCATGCGATTCATCAGGGTCTCATGGTTAGCCCGCTTGGTGGATGAAGCGACGGTTAGTTTACGAAGACCTACACTTGTTAATGGCGGCAAAGTCCGTTTCATTCCCCCCCGTTAGCGTAGGAATCATCAATGTTACATGTGTTAACCTTACTTCCTACACATCTGAGCGTGCTCAGAACCATAGAACTTCCTACCAACTGGTATTCGCGGTTTAATCATTACGGAGTAGGCCGAAGGTTGGAAATTATTCAACTGTAAATAGTTCGATGAGTGACCTTTTAGCAGTAACTTGTTTAGTGGCTCCGTAGCATCCTCTGATGCTGGTAATCATATCCAGGTCCGCTGATCATCCTGCAAAGTCATCCGACACATCGTATGTCTATCCGCACGTGGAACTCATCTCCTATCAGTGGCTCCCCAAGCGTGTAGGGTGAGTAACCACAGAGTGAGTACGTTGGCAGACCTCCAACGGTATCAGTCGTCCAGGATTGCCACGCAATTTGGGCCTGCGGAAAGACCCGACAGAGTCCACTGCGGTCTAGCCATCTCGTAACTGCACCACCGACTTTTTTCGTTGCCCATTCGCCGAACATCGCCGTATATTTTTCACGAAAGCACTCTGTTTGATGATTATCCTTCAACTAGCGGCTAGTGCAGCAACGATGCTGCTGTACGAGTTACCTGATGGTAACCATGGGTCTAGGGAGAAGTGTCGAAACACAAAATCTGACGGCAATCAAAATCTCGAGCATTAGAGGGACTGGATCAATCTCCGACAATCGGTAGTATGGGCAAGAACCCTACTTCATATCTCGGCTTGCAGGCCGGCCATGCATTGCGATGGAGCCTCTAAAATGCTCCCTGATGGAGGCTTGACCCAGAACCTTTCCCCCCCTCAAGCAATGTATAGCGTGGAGGGTTACCATGACGGCCTGACAGAACGTTTTCCGCGCGTAGTCTTAGATTGTCCGAGTTTGAGTCGATAGAGCCCGACCCCGGCCCAGATTGGGAGCCAGGCTAAGAATCCAGTATATCTCAATCAAGCATAAGACAATGTGCCATAGACAACCATGGCGAGGTACTCTCCCCTCGCCGCATATTGCTATCTCCGAATAGCCGGGGAGTATCCACACACTGACGGAGGTTACGGGTTTATGTTAGCACTATTGCGCCATTTTGTCCTATGTCACAGCATGATCGTCAGAATGCATGCGGTGGAAGGTACAACCTGCCTTCCCGACCCAGACTAAAGGAGTAAAGCGGGGTGTTTGCAAGCGCCCAGCGTATCTCGATGGCAATAATCCGGATTTTAATCGCGTCCGCCGCAGCTGAGGTTCCCGTATATCCGCACGTAGTATGATTGTGACCGTTCGATACGTGTGGCTGTTTTTTGAGGGGCTGCCTTAGCACCCCTCGAACCATCCTATAGCTATGTGAGGATAATGGTTACCCGGTCCGACACCGTCATGGAGTACGCTACAGGAGTTCAGCGAAGCGGGAGTGTTGGTTAGCTTCTTTGGATTATAAGAAACATGTTATCATCCGGATGAGAGACGCCTAAGCGACACGGTACTAACAAAAAGCCCACTGAGTCCTATTTGCGCCATACCAATGCTAAGAGTATCTCTGCTTGGCCACTGGCTAACAGCAAGCTGTAGGCTGGCCCTCCGGGCGTCGCGCATGTTTTTAAAGAGGGAAGCCCGAGGATTGGACTCCCTTCTTTGTGGGTTGGTACCAAATGCACTGCCTAAATTTTCTAAGAGTGGTGGATCAGGCAGTTCATCGTTACTGACCTTTTTCATTTCAGAATGAAACCAACTTTTTTGCGCTATTGTATTGCTTAATACCTAAACGCACAGCTGTGGGCTAAGTGTCTGCATCCGTCCGGCCCTCAGTGTAACTAATAGTTGCGATCTTAGCTATAAGGCCATACCCCCACCCAATCGTTCATAGCCCTACTCTCATACTATCGTTGTAGACATAATTGATGAGTTAGCACCGCTACCCATAGGGCGAGCCCCACGGGCCACGCACCGGATACAAAGCACGTCGCAGAGGGGCCCTAAACACTCGGGGATTCTCGCTTTCCCAGGAGGTTACTGTGCTTGCGTGCGGTGCCTGAAAATCCAATGGCG'

def get_reverse_dna(dna):
    complementary_dna = ''
    for d in dna.lower():
        r = ''
        if d == 'a':
            r = 't'
        elif d == 't':
            r = 'a'
        elif d == 'g':
            r = 'c'
        elif d == 'c':
            r = 'g'
        complementary_dna += r
    return complementary_dna[::-1]

def get_start_index(pattern, dna):
    result = []
    l = len(pattern)
    for i in range(0, len(dna)):
        sub = dna[i:i+l]
        if sub == pattern:
            result.append(str(i))
    return result


def count_pattern(str, patt):
    result = 0
    l = len(patt)
    for i in range(0, len(str)):
        sub = str[i:i+l]
        if sub == patt:
            result += 1
    return result

def get_most_frequent_mer_by_len(dna, mer_len):
    largerst = 0
    c = {}
    result = {}
    l = len(dna) - mer_len
    for i in range(0, l):
        pattern = dna[i:i + mer_len]
        c[pattern] = count_pattern(dna, pattern)
        if largerst <= c[pattern]:
            largerst = c[pattern]

    for i in c:
        if c[i] == largerst:
            result[i] = c[i]
    return result

def open_file(name):
    with open('cholera_bacteria.dna', 'r') as dna_file:
        return dna_file.read()

#for i in range(3,len(string)):
 #   c = count_for_mer(string, i)
  #  print c.items()
   # if c.items()[0] == 1:
    #    break

cholera_dna = open_file('cholera_bacteria.dna')
cholera_dna = open_file('cholera_ori.dna')

#print ' '.join(start_pattern('CTTGATCAT', dna))
print len(get_start_index('CTTGATCAT', cholera_dna))
print len(get_start_index('ATGATCAAG', cholera_dna))